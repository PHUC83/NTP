//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 light_direction;
//   float4 material_color;
//   row_major float4x4 view_projection;
//   row_major float4x4 world;
//   row_major float4x4 world_inverse_transpose;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   world                   c0       4
//   view_projection         c4       4
//   world_inverse_transpose c8       3
//   material_color          c11      1
//   light_direction         c12      1
//

    vs_2_0
    def c13, 0, 0, 0, 0
    dcl_position v0  // position<0,1,2,3>
    dcl_normal v1  // normal<0,1,2>

#line 6 "C:\Users\2240781\Desktop\奥元\描画エンジン開発\x3dgp.00\geometric_primitive_vs.hlsl"
    mov r0, c0  // OBJECT_CONSTANT_BUFFER::world<0,1,2,3>
    mul r1, r0.x, c4
    mul r2, r0.y, c5
    add r1, r1, r2
    mul r2, r0.z, c6
    add r1, r1, r2
    mul r0, r0.w, c7
    add r0, r0, r1
    mov r1, c1  // OBJECT_CONSTANT_BUFFER::world<4,5,6,7>
    mul r2, r1.x, c4
    mul r3, r1.y, c5
    add r2, r2, r3
    mul r3, r1.z, c6
    add r2, r2, r3
    mul r1, r1.w, c7
    add r1, r1, r2
    mov r2, c2  // OBJECT_CONSTANT_BUFFER::world<8,9,10,11>
    mul r3, r2.x, c4
    mul r4, r2.y, c5
    add r3, r3, r4
    mul r4, r2.z, c6
    add r3, r3, r4
    mul r2, r2.w, c7
    add r2, r2, r3
    mov r3, c3  // OBJECT_CONSTANT_BUFFER::world<12,13,14,15>
    mul r4, r3.x, c4
    mul r5, r3.y, c5
    add r4, r4, r5
    mul r5, r3.z, c6
    add r4, r4, r5
    mul r3, r3.w, c7
    add r3, r3, r4
    mul r0, r0, v0.x
    mul r1, r1, v0.y
    add r0, r0, r1
    mul r1, r2, v0.z
    add r0, r0, r1
    mul r1, r3, v0.w
    add r0, r0, r1  // ::vout<0,1,2,3>

#line 10
    mul r1, v1.x, c8
    mul r2, v1.y, c9
    add r1, r1, r2
    mul r2, v1.z, c10
    add r1, r1, r2
    add r1, r1, c13.x
    dp4 r2.x, r1, r1
    rsq r2.x, r2.x
    mul r1, r1, r2.x  // ::N<0,1,2,3>
    mov r2, -c12
    dp4 r3.x, r2, r2
    rsq r3.x, r3.x
    mul r2, r2, r3.x  // ::L<0,1,2,3>
    dp4 r1.x, r2, r1
    max r1.x, r1.x, c13.x
    mul r1.xyz, r1.x, c11  // ::vout<4,5,6>
    mov r1.w, c11.w  // ::vout<7>
    mov oPos, r0  // ::main<0,1,2,3>
    mov oD0.xyz, r1  // ::main<4,5,6>
    mov oD0.w, r1.w  // ::main<7>

// approximately 59 instruction slots used
